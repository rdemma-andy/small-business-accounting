import { SignInButton, useUser } from "@clerk/nextjs";
import Head from "next/head";
import Link from "next/link";
import { useState } from "react";
import { TransactionView } from "~/components/transactionCard";
type TransactionData = RouterOutputs["transactions"]["getAllwithCodeAndVendor"][number];

import { RouterOutputs, api } from "~/utils/api";


const CreateTransactionWizard = () => {
  const { user } = useUser();

  const [amount, setAmount] = useState(0);
  const [date, setDate] = useState(new Date());
  const [vendor, setVendor] = useState();

  const ctx = api.useContext();

  const { mutate, isLoading: isPosting } = api.transactions.create.useMutation({
    onMutate: () => {
      console.log("Posting")
      console.log("Amount: " + amount.toString())
      console.log("Date: " + date.getDate().toString())
      console.log(date)
    },
    onSuccess: () => {
      setAmount(0);
      void ctx.transactions.getAllwithCodeAndVendor.invalidate();
    },
    onError: (e) => {
      const errorMessage = e.data?.zodError?.fieldErrors.content;
      if (errorMessage && errorMessage[0]) {
        console.log(errorMessage[0]);
      } else {
        console.log("Failed to post! Please try again later.");
      }
    },
  });




  if (!user) return null;

  return (

    <div className="flex w-full gap-3">
      <input
        placeholder="Date"
        className="grow bg-transparent outline-none"
        type="number"
        value={amount}
        onChange={(e) => setAmount(parseFloat(e.target.value))}
        onKeyDown={(e) => {
          if (e.key === "Enter") {
            e.preventDefault();
            if (amount !== 0) {
              mutate(
                { 
                  date: date.toDateString(),
                  transactionNumber: 0,
                  amount: amount,
                  vendorId: "",
                  glCodeId: "",
              });
            }
          }
        }}
        disabled={isPosting}
      />
      <label htmlFor="inputDate"> Enter a date</label>
      <input
        type = "date"
        id = "inputDate"
        name = "inputDate"
        onChange={(e) => {setDate(new Date(e.target.value))}
      }
        disabled={isPosting}
      />
      {amount !== 0 && !isPosting && (
        <button onClick={() => mutate(
          { 
            date: date.toDateString(),
            transactionNumber: 0,
            amount: amount,
            vendorId: "",
            glCodeId: "",
        })}>Post</button>
      )}
      {isPosting && (
        <div className="flex items-center justify-center">
          Submitting...
        </div>
      )}
    </div>
  );
};

export default function Home() {

  const { user, isSignedIn } = useUser();

  const {data, isLoading} = api.transactions.getAllwithCodeAndVendor.useQuery();
  const vendors = api.vendors.getAll.useQuery();


  if(isLoading) return <div>is Loading...</div>

  if(!user) return <div className="flex justify-center"><SignInButton /></div>

  if(!data) return <div className="flex justify-center">Something Went Wrong</div>

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
      <div className="flex border-b border-slate-400 p-4">
        {!isSignedIn && (
          <div className="flex justify-center">
            <SignInButton />
          </div>
        )}
        {isSignedIn && <CreateTransactionWizard />}
      </div>

      <div className="flex grow flex-col overflow-y-scroll">
        {[...data].map((fullTransaction) => (
          <TransactionView {...fullTransaction} key={fullTransaction.id} />
        ))}
      </div>
      </main>
    </>
  );
}
